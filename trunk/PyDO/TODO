
  * drivers (no new ones for first release)
    - mysql needs type wrapper converters, connection cache, test improvements
  * connection caching and pooling -- test, refine
  * docs
  * tests
  * first release

Other new features:
  * introspection (especially, what are the columns of a table?) -- DEFER
    and hence, generating CREATE TABLE statements (not a huge priority of
    mine, but someone might use it). -- DEFER
  * joins could use additional parameters so you could add to the
    where clause. (?)
  * more general version of scatter fetch (a query on multiple tables/projections). -- YES

Target for first alpha:
  * fix mysql; better support for autocommit.
  * pool should work; if cache isn't declared, what happens?
  * tests should have better coverage!!!
  * docs should be almost complete!!!

Other databases to support:
  * firebird
  * sqlrelay (I'm particularly interested in this!)
  * gadfly (does anyone use this?)
  * maxdb
  * odbc bindings (mxODBC; Drew's pure python version?) 
  * oracle (which adapter?)
  * sybase


NOTES
-----

In the case of postgresql, it should usually be possible to determine
what sequence is being used by guessing, or by introspection.  

--

Projections currently replace their superclasses' field declarations,
but keep unique/sequence information for those fields.  That seems a
bit inconsistent.  I do think that if a projection is stated with just
a string, it should inherit more verbose descriptions, including
unique/sequence, but not otherwise.  (This is a buglet which would
only become apparent if you were using custom field classes.)  -- this
is now implemented, in part.  Unique/sequenced is still inherited
separately, so that information is inherited regardless of how you
redeclare the field in a subclass; this is wrong and needs to be
redone.  Tests should be added for this.  

-- 

I put in accessor methods for _fields and _unique (getFields() and
getUniqueConstraints()).

-- 

Since the cache requires Python 2.4, and that is what I am testing on,
I am dropping 2.3 compatibility for the time being.  I've put in
decorators, which typographically I see as superior to putting the
classmethod stuff at the end of the function.  Generator
comprehensions would also be logical to add; wherever I'm using a list
comprehension nested in something that would take an iterator I'll
switch to using them.



..
   Local Variables:
   mode: rst
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:




  


