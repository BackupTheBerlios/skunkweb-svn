#!@BASH@
# -*-sh-*-
#  
#  Copyright (C) 2001 Andrew T. Csillag <drew_csillag@geocities.com>
#  
#      You may distribute under the terms of either the GNU General
#      Public License or the SkunkWeb License, as specified in the
#      README file.
#   
#
# This is the manager script for SkunkWeb, used for stopping,
# starting, and restarting the daemon.
#
# $Id: swmgr.in,v 1.6 2003/05/01 20:45:53 drew_csillag Exp $

umask 002

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@

PYTHON=@PYTHON@
# Extra options to pass to the AED server
SWOPTIONS=""

SWSTART="${bindir}/skunkweb $SWOPTIONS"

# User SkunkWeb stuff is owned by
USER=@OWNER@

# User SkunkWeb should be running as
RUNASROOT=@RUNASROOT@

# Path to sudo executable, if exists
SUDO=@SUDO@

# Some environment that needs to be set.
ENV="ORACLE_HOME=$ORACLE_HOME LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME/lib NLS_LANG=$NLS_LANG"

function run_as_user 
{
    #prog=$*

    if [ `$PYTHON -c "import pwd,os; print pwd.getpwuid(os.getuid())[0]"` != "$RUNASROOT" ]
    then
        # Check if sudo exists
	if [ "$SUDO" = "" ]
	then
	    echo "Not running as user '$USER' and no sudo program, aborting..."
	    exit 1
        fi

        # Need to sudo
	if $SUDO -u $RUNASROOT echo -n > /dev/null
	then
	    echo -n
        else
	    echo "Cannot sudo to user '$RUNASROOT', fix and retry!" >&2
	    exit 1
        fi

	$SUDO -u $RUNASROOT env $ENV "$@"
    else
        env $ENV "$@"
    fi
}

function get_pid_file
{
    run_as_user @bindir@/swpython -q -r -e 'import SkunkWeb,sys; print >> sys.__stdout__, SkunkWeb.Configuration.pidFile'
}

function configtest
{
    run_as_user @bindir@/swpython -q -e 'import sys; print "Syntax OK";'
}


function usage 
{
    echo "Usage: `basename $0` [options] {start|stop|restart|configtest}"
    echo "Options:"
    echo "    -h     print this message and exit"
    echo "    -f     fast stop or restart; doesn't run swpython"
    echo "           to find the pid file"
    echo "           to determine location of pid file"
    echo "    -r     start skunkweb as root so it can bind to a low port"
    echo
    echo "stop, start, and restart perform the expected operations."
    echo "Without the -f argument, stop and restart will verify that"
    echo "the configuration files are parseable before stopping the"
    echo "running server.  "
    echo "configtest simply runs swpython and either terminates with"
    echo "a Python exception or prints Syntax OK and exits."
    exit 1
}


while getopts "hrf" ARG
do
  case ${ARG} in
  h)
     usage
     ;;
  r)
     RUNASROOT=root
     echo "If you want to make it so swmgr always starts skunkweb as root,"
     echo "edit swmgr and change the line where it says RUNASROOT=user"
     echo "and make it say RUNASROOT=root"
     echo
     echo "In addition, to restart and stop skunkweb you must use the -r"
     echo "option when skunkweb was started with -r"
     ;;
  f)
     FAST=1
     ;;
  esac
done
     

#if [ "$1" = '-r' ]
#then
#    RUNASROOT=root
#    echo "If you want to make it so swmgr always starts skunkweb as root,"
#    echo "edit swmgr and change the line where it says RUNASROOT=user"
#    echo "and make it say RUNASROOT=root"
#    echo
#    echo "In addition, to restart and stop skunkweb you must use the -r"
#    echo "option when skunkweb was started with -r"
#    shift
#fi

shift $(($OPTIND - 1))

# See how we were called.
case "$1" in
  start)
	echo "Starting SkunkWeb..."
	if run_as_user $SWSTART
	then
	    echo "SkunkWeb started."
        else
	    echo "SkunkWeb startup failed. Check error log."
	    exit 1
        fi
	;;
  stop)
	echo "Stopping SkunkWeb..."
        if ! [ -z $FAST ]
        then
          PIDFILE=@localstatedir@/run/sw.pid
        else
	  PIDFILE=`get_pid_file`
          if [ -z "$PIDFILE" ]
	  then
	      echo "run of swpython to determine pidfile failed!"
              exit 1
          fi
        fi
	if [ ! -f $PIDFILE ] 
	then
	    echo "SkunkWeb pidfile missing. Aborting..."
	    exit 1
	fi
	PID=`cat $PIDFILE`

	# Kill it!
	run_as_user kill -TERM $PID

	echo "SkunkWeb stopped."
	;;
  restart)
        # Send the HUP signal
	echo "Restarting SkunkWeb..."
        if ! [ -z $FAST ]
        then
          PIDFILE=@localstatedir@/run/sw.pid
        else
	  PIDFILE=`get_pid_file`
          if [ -z "$PIDFILE" ]
	  then
	      echo "run of swpython to determine pidfile failed!"
              exit 1
          fi
        fi
	if [ ! -f $PIDFILE ] 
	then
	    echo "SkunkWeb pidfile missing. Aborting..."
	    exit 1
	fi
	PID=`cat $PIDFILE`
	# Kill -HUP 
	run_as_user kill -HUP $PID

	echo "SkunkWeb restarted"
	;;
  configtest)
        configtest
        ;;
  *)
        usage
        ;;
esac

exit 0
