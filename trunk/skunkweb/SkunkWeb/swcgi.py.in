#!@PYTHON@

#edit this as appropriate as to where the aecgi protocol is listening
#as specified by the AecgiListenPorts variable in sw.conf
connectInfo = ('localhost', 9888)# or '/tmp/skunksock' or whatever
# timeout for reading from socket; 0 is no timeout
TIMEOUT=0

#shouldn't need to change anything below here

#proto
#read 1 byte
#send 10 byte length
#read req data (marshal format)
#read 10 byte lenght
#read data

#req data is dict of {'environ': os.environ,
#                     'headers': request_headers,
#                     'stdin': stdin}

import os
import socket
import sys
import string
import marshal

sys.path.append('@libdir@/pylibs')
import SocketScience

env = {}
headers = {}
stdin = ''
for k, v in os.environ.items():
    if k[:5] == 'HTTP_':
        hdrized = '-'.join(map(string.capitalize, k[5:].split('_')))
        headers[hdrized] = v
    env[k] = v
    
if headers.has_key('Content-Length'):
    cl = headers['Content-Length']
    stdin = sys.stdin.read(string.atoi(cl))
elif env.has_key('CONTENT_LENGTH'):
    nbtr = headers['Content-Length'] = env['CONTENT_LENGTH']
    stdin = sys.stdin.read(string.atoi(nbtr))


req_data = marshal.dumps({'environ': env,
                          'headers': headers,
                          'stdin': stdin})


if type(connectInfo) == type(''):
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
else:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

sock.connect(connectInfo)
sock.recv(1)
sock.send('%010d%s' % (len(req_data), req_data))
rlen = SocketScience.read_this_many(sock, 10, TIMEOUT)
rlen = string.atoi(rlen)
data = SocketScience.read_this_many(sock, rlen, TIMEOUT)
sys.stdout.write(data)
          
