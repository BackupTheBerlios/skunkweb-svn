#!@PYTHON@
#  
#  Copyright (C) 2001 Andrew T. Csillag <drew_csillag@geocities.com>
#  
#      You may distribute under the terms of either the GNU General
#      Public License or the SkunkWeb License, as specified in the
#      README file.
#   
import sys
import getopt

usage="""\
Usage: swpython [options] [scriptname]
    -c,--config-files=configfilelist    list of config files to load,
                                        delimited by colons
    -h,--help                           print this screen and exit
    -i                                  if scriptname is provided,
                                        run script and then start
                                        interactive interpreter
    -e,--execute=script                 execute script, then exit
    -r,--redir-logs                     redirect logs to stderr
    -q,--quiet                          make swpython be quieter
"""    
    

def help():
    print usage
##    print >> sys.stderr, ("Usage: swpython [-ih] [-c configfilelist] "
##                          "[scriptname]")
##    print >> sys.stderr
##    print >> sys.stderr, ("  -c,--config-files=configfilelist   list of config"
##                          " files to load delimited")
##    print >> sys.stderr, ("                                     by colons")
##    print >> sys.stderr, ("  -h,--help                          show this "
##                          "screen")
##    print >> sys.stderr, ("  -i                                 if scriptname"
##                          " is provided, run script")
##    print >> sys.stderr, ("                                     and then start"
##                          " interactive interpreter")
##    print >> sys.stderr, ("  -e,--execute=script                Execute script"
##                          " then exit")
##    print >> sys.stderr, ("  -r,--redir-logs                    Redirect logs"
##                          " to stderr")
##    print >> sys.stderr
    sys.exit()

#read command line, add -i option to go to interactive interpreter afterwards
interactive = None
configFiles = None
command = None
redirlogs = None
quiet=None

try:
    optlist, args = getopt.getopt(sys.argv[1:], 'c:hqie:r', [
        'help', 'quiet', 'config-files=', 'execute=', 'redir-logs'])
except getopt.GetoptError, val:
    sys.stderr.write("ERROR: %s\n" % val)
    help()
    
for (opt, optval) in optlist:
    if opt in ('--help', '-h'):
        help()
    elif opt == '-i':
        interactive = not interactive
    elif opt == '-e' or opt == '--execute':
	interactive = 0
        command = optval
    elif opt == '-r' or opt == '--redir-logs':
        redirlogs = not redirlogs
    elif opt == '-q' or opt=='--quiet':
        quiet=1

    else: 
        configFiles = optval.split(':')

SkunkWebPath = '@libdir@'
if SkunkWebPath[0] != '@':
    sys.path.append(SkunkWebPath)
    
from SkunkWeb import bootloader
sys.path.append(bootloader._servicesRoot)
sys.path.append(bootloader._pylibsRoot) 
import ConfigLoader
import SkunkWeb

if (not quiet) and not args:
    print >> sys.stderr, "Initializing..."
if configFiles is None:
    configFiles = [bootloader.DEFAULT_CONFIG_FILE_NAME]
bootloader.init(configFiles, bootloader.SkunkRoot)
import SkunkWeb.Server
SkunkWeb.Server.addService = lambda *args: None
if interactive and not quiet:
    print >> sys.stderr, "Loading Services..."

if redirlogs:
    import Logger
    Logger.config.push({'errorLog' : sys.__stderr__})

bootloader.load()
SkunkWeb.Hooks.ChildStart()

if interactive or (not args and not command):
    import code
    code.interact('SkunkWeb @SW_VERSION@ -- NO WARRANTY')
else:
    if command:
        exec command in {}, {}
	sys.exit(0)
    try:
        co = compile(open(args[0]).read(), args[0], 'exec')
    except SyntaxError:
        v = sys.exc_value
        v.filename = args[0]
        raise
    sys.argv = args
    ll = {}
    exec co in ll, ll
    
    if interactive:
        import code
        code.interact('', local=ll)
    
