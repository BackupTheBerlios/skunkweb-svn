# -*-python-*-
#
#  Copyright (C) 2001-2006 Andrew T. Csillag <drew_csillag@geocities.com>
#  
#      You may distribute under the terms of either the GNU General
#      Public License or the SkunkWeb License, as specified in the
#      README file.
#

# If you want to be able to start skunkweb as root (so it can bind to
# port 80) but want it to run as a different user/group, set these to
# appropriate values.
#
# userToRunAs = "@OWNER@"
# groupToRunAs = "@GROUP@"

# A little default so it will work out of the box in most cases
if "@RUNASROOT@" == "root":
    userToRunAs = "@OWNER@"
    groupToRunAs = "@GROUP@"
    
# standard services are:
#
# requestHandler          -- abstract basic service for handling requests;
#                            a foundation for others, as noted.
#
# aecgi                   -- provides the protocol used to communicate with
#                            the Apache mod_skunkweb module
#
# web                     -- abstract http specific service.
#                            Requires requestHandler.
#
# ae_component            -- abstract service that initializes the AE
#                            component library.
#
# templating              -- concrete service that services web requests with
#                            AE components.  Requires requestHandler,
#                            web, and ae_component.
#
# mvc.service             -- controller framework.
#
# layout                  -- layout template support; adds <:slot:> and
#                            <:calltemplate:> tags to STML
#
# sessionHandler          -- adds a session-scoped object to web's
#                            HTTPConnection class which provides a simple form
#                            of data persistence between requests, using cookies
#                            and a pluggable data store (currently only MySQL,
#                            PostgreSQL, and shelve files).
#                            Requires web.
#
# rewrite                 -- supports common url rewriting tasks and supplies a
#                            more complex tasks to be performed by other services
#                            by means of a hook framework.
#
# auth                    -- service that provides various ways to do web
#                            based authentication.  Requires web, and may
#                            require sessionHandler.
#
# httpd                   -- service which handles http requests directly, as
#                            opposed to via the mod_skunkweb Apache module.
#                            Requires requestHandler.
#
# fcgiprot                -- FastCGI support.
#
# scgi                    -- SCGI support.
#
# userdir                 -- user directories
#
# usertracking            -- adds a usertracking cookie

# Other services:
#
# remote                  -- server-side implementation of a remote call facility
#                            for AE components.  Requires requestHandler and
#                            ae_component.
#
# remote_client           -- extension to templating which adds
#                            the ability to make remote calls.  Requires
#                            templating and its prerequisites;
#                            does not require the remote service.
#
# extcgi                  -- supports external CGI's, i.e. regular ones,
#                            as opposed to python CGI's which we will some
#                            day be able to execute in place
#
# Deprecated services:
#
# basicauth        
# oracle
# postgresql
# pypgsqlcache
# psycopgcache
# mysql
# firebird
# product
# pycgi

# Here are the services we load.  Services load their dependencies
# automatically (simply by loading them).  By default we load httpd,
# but don't use that for production -- use aecgi (with mod_skunkweb),
# scgi or fcgiprot.

services = ['templating',
            'layout',
            'httpd']

# If you want to control skunkweb through D.J. Bernsteins daemontools
# or a similar setup, skunkweb doesn't have to go to background.
# Setting runInForeground to 1 provides this. The default value is 0,
# so that the "traditional" Unix way of daemonizing is used.
#
# runInForeground = 0


# For extra performance, we can store the compiled forms of things in memory
# in addition to the disk.  This does increase the memory footprint a bit
# but not too much, and reduces the disk IO a bit.
# useCompileMemoryCache = 1

# if you don't want every line of a multiline log entry to be prefixed
# with a logstamp (the default behavior), set this to a false value.
#
# stampEveryLine=0

# services set to be debugged.

debugServices=[]

# For the web service
# if request method is POST, but has a GET-like query string,
# CONNECTION.args will contain both sets of arguments
# mergeQueryStringWithPostData=1
#
# if set to a true value, skunkweb will attempt to use gzip compression
# on text/* mime type bodies
# textCompression=0
#
# if set to a true value, skunkweb will generate ETag headers for everything
# it serves up
# generateEtagHeader=1

# For httpd service ONLY: 
# if you set this to a true value, the CGI environmental variable
# HTTP_REMOTE_HOST will always be set, involving a potentially costly DNS
# lookup.  If you don't want it, you can still use HTTP_REMOTE_ADDR and
# perform the lookup on demand.  Default is 0 (no lookup and no HTTP_REMOTE_HOST
# variable in the environment).
# N.B. This only affects the httpd service, and has no bearing on environmental
# variables SkunkWeb receives from Apache or elsewhere.
#
# lookupHTTPRemoteHost = 1
#
# port(s) for the httpd service to listen on
# HTTPListenPorts=['TCP::8080']

# port(s) for the aecgi service to listen on
# AecgiListenPorts=['TCP:localhost:9888']

# port(s) for the remote service to listen on
# RemoteListenPorts=['TCP:localhost:9887']

# server name (for httpd) -- defaults to value returned by socket.getfqdn(),
# may be scoped 
# ServerName = 'www.skunk.org'

# to make the remote listen port do remote jobs, uncomment this and
# edit to match RemoteListenPorts
# Scope(Port(9887, job=REMOTE_JOB))

# the default job 
# job=TEMPLATING_JOB

# if your sitelibs directory is somewhere else, modify the following
import sys
sys.path.append('@prefix@/sitelibs')


# for development, setting this to a true value will cause changes to
# sitelibs to be reflected on the next request, without a bounce of
# the server.  Turn it off for production environments.  If you get
# weird errors with it on, see the option below.
# 
# userModuleCleanup = 0

# When using the userModuleCleanup option, sometimes there are modules
# that the module cleaner will whack that you don't want it to,
# usually resulting in an odd exception where a global variable or
# builtin isn't defined that ought to be.  When that happens, add
# the full module name (including package it's in, e.g. PyDO.mysqlconn)
# to this list and the module cleaner won't clear out the module.
# You can also just specify a prefix of the full module name, so you could
# have the cleaner ignore entire packages, etc.
#
# userModuleCleanupIgnore = []

# list of document names that will be recognized as index documents;
# indexDocuments=['index.html']

# If you are going to a directory, and none of indexDocuments exist,
# use this as the index.html for that directory.  
#
# defaultIndexHtml = None


# The extcgi service
#
# Usually this will be a scoped thing, where you tell skunkweb where
# the cgi executable lives and where it shows up in the URI space.
# Unfortunately, for now, you need to tell skunkweb where it shows up
# in the URI space twice....
#
# #where it is activated in the URI space
# Scope(Location('/moin/',
#       #tell skunkweb it's a CGI job
#       job=CGI_JOB,               
#       #path to the CGI program
#       CGIProgram='/home/skunkweb/moin/wiki/cgi-bin/moin.cgi',
#       #If the program uses PATH_INFO in it's operation, set this to the
#       #same as Location
#       CGIProgramBase='/moin/'))

# The auth service
#
# This service allows you to do web based authentication in a myriad of
# ways and provides 3 builtin means of doing so.  If your authentication
# requirements aren't satisfied by the three provided classes, there are
# a number of base classes in the auth service module that you can use
# to your advantage when building an authentication scheme (e.g. rendering
# of login pages, authing against a basicauth file, etc).

# auth variables -- can be done globally but most likely will be
# scoped e.g.
# BTW: you really would only uncomment one of the following groups.
# Scope(Location("/demo",
#               authActivated=1,  #don't forget this or auth won't engage

#               # the basic auth authorizer 
#               authAuthorizer='auth.BasicAuth',
#               authAuthorizerCtorArgs=(
#                   #the authentication name or realm that will show up
#                   #in the browser's login box
#                   'test',
#                   #the file (administered with swpasswd) where the username
#                   #password info is stored
#                   '/usr/local/skunk/var/AUTHDB'),

#               # a simple cookie authorizer
#               authAuthorizer='auth.PlainCookieAuth',
#               authAuthorizerCtorArgs=(
#                   #the file (administered with swpasswd) where the username
#                   #password info is stored
#                   '/usr/local/skunk/var/AUTHDB',
#                   #the login page (it can be in the protected area)
#                   "/demo/login.html",
#                   #the cookie name
#                   'auth',
#                   #a nonce value -- change this to something else -- that
#                   #will be used to tamperproof the cookie value.  Make sure
#                   #it is the same on all machines that need to read this
#                   #cookie
#                   "cookieNonceValue",
#                   #a dictionary of cookie attributes (attributes are:
#                   #path, max-age, comment, secure, domain, version and
#                   #expires) to use when setting the cookie on login
#                   {'path':'/'}),

#               # a simple session authorizer
#               # if you use this, the sessionHandler service *must* be loaded
#               authAuthorizer='auth.PlainSessionAuth',
#               authAuthorizerCtorArgs=(
#                   #the key in the session where the username will be stored
#                   'username',
#                   #the file (administered with swpasswd) where the username
#                   #password info is stored
#                   '/usr/local/skunk/var/AUTHDB',
#                   #the login page (it can be in the protected area)
#                   "/demo/login.html"),

#               ))


# level of commenting to be inserted in html documents when components
# are entered/exited
# 0 = no commenting (default)
# 1 = only show component name in comments
# 2 = show component name and argument names
# 3 = show component name, argument names and values
#
# componentCommentLevel = 0

# The directory that is used to hold templates, images, msgcats, comps,
# etc.
#
documentRoot = '@DOCROOT@'


# What filesystem implementations to use to search for resources.
# If you want to use archive files or other esoterica, use a MultiFS.
#
# documentRootFS = vfs.LocalFS()

# for the sendmail tag, how to actually send it.
# If MailMethod == 'sendmail', it will call the sendmail program to do
# it (this is the default).  If you set it to 'relay', it will send the
# mail via SMTP to the host specified by the MailHost config variable
# (which defaults to localhost). 'qmail' uses the qmail MTA. If using
# the 'sendmail' MailMethod, the program that is run comes from
# SendmailCommand. When using the 'qmail' method, the program given in
# QmailInject is used. When no from address is specified in the call to
# the sendmail tag (or it's corresponding function), the address
# FromAddress is used.
# AddressCheckLevel (default is 1): 0 - no checks, 1 - simple checks,
# 2 - full syntax check (not implemented yet)
# For more information look at the document "How to send Mail with SkunkWeb"
#
# MailMethod = 'sendmail'
# MailHost = 'localhost'
# SendmailCommand = 'sendmail'
# FromAddress = 'root@localhost'
# QmailInject = '/var/qmail/bin/qmail-inject'
# AddressCheckLevel = 1


# If using NFS (or other shared filesystem) for the component cache,
# set numServers to the number of shared filesystems that the component
# cache will be on, failoverRetry to the number of seconds to wait before
# trying the shared filesystem again (it should be soft mounted!!!),
# and failoverComponentCacheRoot to an area on local disk to use as
# a temporary replacement for the server that failed in the meantime.
# See the developer and or ops manuals on caching for details
#
# numServers = 0
# failoverRetry = 30
# failoverComponentCacheRoot = '@prefix@/failoverCache'


# Locations of logfiles.  The regularLog logs significant, but normal
# events, the debugLog logs debug info according to debugServices,
# the accessLog logs access information, and the errorLog logs erroneous
# conditions (mostly tracebacks)
#
# regularLog = '@LOGDIR@/sw.log'
# debugLog = '@LOGDIR@/debug.log'
# accessLog = '@LOGDIR@/access.log'
# httpAccessLog = '@LOGDIR@/http_access.log'
# errorLog = '@LOGDIR@/error.log'

# To turn on http access logging, set HttpLoggingOn to a true value.
#
# HttpLoggingOn=0

# Location of where to put the pidFile that tells swmgr how to find the
# running SkunkWeb server process
#
# pidFile = '@localstatedir@/run/sw.pid

# The number of child processes to be started.  This is the max number
# of concurrent page views (although if Apache sits in front, it may
# look like quite a few more).
#
# numProcs = 15

# The number of seconds that the parent will wait after having sent
# SIGTERM to the children before killing the children off with SIGKILL
# during a shutdown or restart
#
# maxKillTime = 5

# You probably don't need to change this, but it's the interval at which
# the parent looks for corpses that need to be buried and replaced with
# new, living kids.
#
# pollPeriod = 5

# The number of requests that a child server process will handle before
# committing suicide and having the parent respawn.  This is mainly to
# make sure we aren't leaking memory, but you can probably set it to
# something a bit higher.
#
# maxRequests = 256

# If you want to fallback to the cached version if an exception occurs
# when rendering a (to be) cached component, set this to a true value
#
# fallbackToCache = None

# The time (in seconds) for a component to be cached if cache is
# specified in the component call and there was no <:cache:> tag (or
# __expiration wasn't set)
#
# defaultExpiryDuration = 30

# The location on disk of where the compile cache should reside.  This
# should be a local filesystem
#
# compileCacheRoot = '@prefix@/cache'

# How stale the cached version is when we render it anyway when called
# with cache=defer (in seconds)
#
# maxDeferStale = 3600  # 1 hour

# The location of the component cache on disk.  Can be the same as the
# compileCacheRoot.
#
# componentCacheRoot = '@prefix@/cache

# how long to extend the life of a deferred component cache when we go
# to render it (in seconds)
#
# deferAdvance = 30

## clearCache Related Items
## N.B.  clearCache should be avoided whenever possible unless matchExact
## is true, or the number of cached versions for a component are small
## or else clearCache may be exceptionally slow.
#
## The location of various commands used by clearCache on your system
# fgrepCommand = '/bin/fgrep'
# findCommand = '/usr/bin/find' #must be GNU find
# sedCommand = '/bin/sed' 
# xargsCommand = '/usr/bin/xargs' #must be Solaris or GNU find

# If it should run using the files in the compile cache, ignoring
# the timestamps of the document root files.  This way you can ship
# the server with a "shadow" document root (it will have all the files,
# they just only need be 0 length), i.e. no actual source in the docroot.
#
# runOutOfCache = 0

# Normally, the python code generated for STML templates is stored 
# in the cache file (for tracebacks, etc.).  Setting this to 1 disables
# this.
#
# dontCacheSource = 0

# Normally, the python code generated by the STML compiler will have
# line number instructions so that we can sync up the file/line numbers
# from the template to the generated code for traceback purposes.  Setting
# this to 1 turns this off.
#
# noTagDebug = 0

# A list of mime types that are considered templates
#
# templateMimeTypes = ['text/html', 'text/plain']


# The location of your mimetypes file
#
# mimeTypesFile = '@sysconfdir@/mime.types'

# If we cannot determine the mime type by examining the extension of the
# file, what mime type we should return
#
# defaultMimeType = 'application/octet-stream'

# if using a multi-lingual message catalog and you don't specify the
# language, what language we should assume
#
# DefaultLanguage = 'eng'

# If you want to have SkunkWeb return a message saying it's not there
# as the message, instead of raising an exception if a message you ask
# for isn't in the catalog, which is the default, set this to a false
# value.
#
# strictMessageCatalogs = 1

# The time (in seconds) allowed for a request to complete before timing
# it out (by raising an exception).
#
# DocumentTimeout = 30

# The amount of time (in seconds) allowed for the PostRequest hooks to
# execute before timing them out.
#
# PostResponseTimeout = 20

# How long (in seconds) the http keepalive timeout should be between
# HTTP requests.  0 (the default) effectively turns off keepalive.
#
# HTTPKeepAliveTimeout = 0

# A list of mime types that should not be accessible via web request
#
# hideMimeTypes = [
#        "text/x-stml-component",
#        "text/x-stml-python-component",
#        "text/x-stml-data-component",
#        "text/x-stml-python-data-component",
#        ]

# Mime types of things that should be rendered as templates when called
# via web request.
#
# interpretMimeTypes = [
#        "text/html",
#        "application/x-python"
#        ]

# Dictionary of mime-type-specific request handlers for mime types
# that are neither hidden nor interpreted by the templating engine,
# but that you wish to give some special handling.  The keys should be
# mime types, and the values should be callables that take two arguments,
# a connection object and a session dictionary.  By default this dictionary
# is empty.
#
# mimeHandlers = {}

# whether or not templating's HTML helper tags should generate XHTML-
# compliant markup or not (defaults to True).
# tagsGenerateXHTML = 1 

# path to a template in the docroot, dependent on scope,
# that should be shown if the we send back an error (500) page
# The exception text will show up in an additional template variable
# ERROR_TEXT
#
# errorTemplate = None

# path to a template in the docroot, dependent on scope,
# that should be shown if the we send back a 404 Not Found response
#
# notFoundTemplate = None

# For the psp service (if enabled):
#
# If you want .html files to be handled by the PSP interpreter (instead of
# say STML), add 'text/html' (and probably 'text/plain' also) 
# brackets below (and should probably remove it/them from templateMimeTypes
# also
#
# pspTemplateTypes = []
#
# Presuming that you want .psp files to be interpreted via URL request
# (I'm guessing you do), set this to a true value from whence it will
# effictively append 'application/x-psp-python-component' to the
# interpretMimeTypes list (or you could do it yourself).
#
# pspTopLevelInterpret = 1

# For the rewrite service: each rule specifies a replacement template
# to be used in modifying a portion of connection.uri that is matched
# by the regular expression. Any named groups in the matched regular
# expression will be added to connection.args if rewriteMatchToArgs is 
# true (the default).  For example:
#
# rewriteRules = [(r'^/rewrite/(?P<real>.*?)\.html', r"/\1.html")]
# above rule will convert uri '/rewrite/any_name.html' to
# '/any_name.html' and set connection.args['real'] to 'any_name'
#
# variables:
# rewriteRules=[] 
# rewriteApplyAll=1
# rewriteMatchToArgs=1

# The variables defined by the rewrite service are not scopeable.
# For more details, see the documentation in the rewrite service.

########################################################################
# FOR THE  sessionHandler SERVICE:
########################################################################

########################################################################
# The session store implementation class (full package name). This
# defaults to None, which, if the sessionHandler service is imported,
# will cause an error.  To use sessionHandler, you must specify a session
# store implementation; e.g.:
# SessionStore='sessionHandler.MySQLSessionStore.Store'

########################################################################
# the key under which the session is kept (in a cookie or in URL rewriting)
#
# SessionIDKey='sessionID'

########################################################################
# the session timeout, in seconds.  Sessions which have seen no action
# for this period of time are ripe for reaping.
#
# SessionTimeout=30*60

########################################################################
# For the MySQL session store, you must have the mysql service loaded
# and have MySQLConnectParams defined. This should the connection alias
# used.
# SessionHandler_MySQLAlias="session"

########################################################################
# For the PostgreSQL session store, you must use the pypgsqlcache s
# connection caching service.  If necessary override this connection
# alias:
# SessionHandler_PostgreSQLAlias="session"

########################################################################
# For the FSSessionStoreImpl, the directory where pickle files should
# be created
# SessionHandler_FSSessionDir='@localstatedir@/run/skunksessions'

########################################################################
# END sessionHandler CONFIG
########################################################################

########################################################################
# To use cached connections with the pylibs/MySQL module set this to
# a dictionary of 'name': connect-kwarg pairs, e.g.:
# MySQLConnectParams = {'torchsong' : {'host' : 'localhost',
#                                      'user' : 'lungfish',
#                                      'passwd' : 'aardvark',
#                                      'db'   : 'ostrich'}}
#
# MySQLConnectParams = {}

# If you are using transactional tables with MySQL, you can add a rollback
# after every request by setting this to a true value:
# MySQLRollback=0

# If you want a validation function to be performed every time you get
# a connection from the cache, specify it here:
# MySQLTestFunc=None # e.g., MySQL.SimpleQueryTest

########################################################################
# To use cached connections with the pylibs/Oracle module set this to
# a dictionary of 'name': 'connection_string' pairs
#
# OracleConnectStrings = {}

########################################################################
# To speed up the use of stored procedures (saves one query per sp fetch)
# we can preload the procedure signatures ahead of time.
# Set to a dictionary of 'name': ['list', 'of', 'packagenames'] where name
# matches that used in OracleConnectStrings
#
# IF YOU ARE USING DCOracle2 -- DO NOT USE THIS OPTION!!!
# OracleProcedurePackageLists = {}

########################################################################
# To use cached connections with the pylibs/PostgreSql module set this to
# a dictionary of 'name': 'connection_string' pairs
#
# PostgreSQLConnectParams = {}

########################################################################
# To turn the userdir functionality on (outside of mere inclusion of
# the service) set UserDir to 1 (it's default).  To turn it off, set
# it to a false value (None, 0, '', etc.)
#
# userDir = 1

########################################################################
# The path to append to the user's home directory for the userdir path.
#
# userDirPath = 'public_html'


########################################################################
# FOR THE usertracking SERVICE:
########################################################################
# these are the variables you are most likely to want to set; for others,
# see the source of usertracking.py.

# # set to 1 to turn it on, at top-level or in a scope
#
# usertrackingOn=0 

# # change this to whatever name you prefer
#
# usertrackingCookieName='SKUNKTREK_ID'

# # set this to some number of seconds (from the current time) if
# # you want a persistent cookie
#
# usertrackingCookieExpires=None # for a two year cookie, 2*365*24*60*60

########################################################################
# For the layout service
#
# skinDir='/comp/skins'
# defaultSkin='default'
# slotConfigFilename='slotconf.pydcmp'
# defaultTemplateFilename='template.comp'

########################################################################
# For the mvc service
#
# MvcOn = False    # must be true to use mvc in a scope
# controllers={}   # add controllers here
# routes=[]        # add routes here
# defaultErrorMimetype='text/html'


########################################################################
# directive to include another conf file:
# Include('/path/to/special.conf')

