Connect Strings
------------------------------
When calling PyDO.PyDBI.DBIInitAlias, you have to specify a connect
string.  If you are using PyDO from within the SkunkWeb server, use
the caching versions of the connect strings so that connections get
rolled back properly in the event of an error.  Obviously, if you 
dont have the pylib modules required for the caching versions, use
the direct methods.

For Oracle, they take one of two forms (either can optionally have '|verbose'
appended to them to log the sql executed by the connection):
   pydo:oracle:user|cache      -- uses the connection caching of the Oracle
                                  pylib that is used by the oracle SkunkWeb
                                  service
or
   pydo:oracle:user/pw@host    -- use DCOracle directly

For PostgreSQL, they also take one of two forms (either can optionally
have ':verbose' appended to them to log the sql executed by the
connection):
   pydo:postgresql:user|cache  -- uses the connection caching of the
                                  PostgreSql pylib that is used by the
                                  postgresql SkunkWeb service
or
   pydo:postgresql:normal_postgresql_connstr -- use pgdb directly

   In the case that you need to connect to a database running on an
   alternate port, replace the host part of the connect string with
   host|port, and you should be good to go.

   One note about SERIAL columns:  PostgreSQL mainly just creates a
   sequence named table_column_seq, so for your sequenced item, make
   sure to put it in.

For MySQL, which hasn't been tested all that much, only the non-caching
version is currently available.  If there is demand I can do it, I just
don't have mysql installed anywhere convienient for me to test.

    pydo:mysql:normal_mysql_connect_string

Inheritance Semantics
------------------------------

All base class fields (columns) are inherited, subclass can add fields 
and can only change inherited field types.

the unique and connectionAlias attributes are inherited from left
most, depth first class which defines them. 

Static methods are inherited as static methods.

Instance methods are inherited as instance methods.

PyDO classes cannot inherit from non-PyDO classes.

unique, _instantiable, sequenced and auto_increment are not inherited


DataClass Stuff
------------------------------
To be instantiable, class must define (or inherit) the connectionAlias,  
table and fields attributes, or, can set the _instantiable attribute 
to 1.  The overridability is there so, in the case where you have your own 
fetching mechanisms (i.e. stored procs), you can make the object 
instantiable even though it normally wouldn't be (since no table for 
instance).

The fields member is tuple of (columnname, dbtype) pairs.
The unique attribute is a list of strings and/or tuple of strings.  If
a string, this says that this field is unique in the table, if a
tuple, this says these fields taken together are unique in the
table. 

You can make the dataclass instances immutable by defining the mutable 
attribute as a false value (None, 0, empty string, etc.)

For databases with named sequences, you can populate the value of an 
field by defining the sequenced member as a dict of 
{fieldname: sequence_name} pairs, whereby if, on a call to new(), the 
fields specified in sequenced are not present, the values are fetched from
the sequence(s) before insert and subsequently inserted.

For databases with auto-increment fields, you can populate the value of an 
field by defining the auto_increment member with a dict of 
{fieldname: auto_increment_name} pairs and the values will be populated into 
the object after the insert is executed.  In the case of MySQL, there can only
be one auto-increment field per table, so the auto_increment_name is needed, 
but it's value is irrelevant.

To define a static method (one that applies to the dataclass) define the 
method as 
    def static_<realmethodname>

Others are instance methods.

To get an unbound instance method, get <data_class>.<instance_method>, to get a
static method, unbound from it's original data class (presumably called from 
a sub-data-classe), use <data_class>.static_<static_method_name>.

Attributes (static methods, data members, etc.) on data classes are accessible 
from instances.


Attributes on DataClasses
--------------------
_klass           - name of the data class
_baseClasses     - tuple of super classes
_staticMethods   - dict of static methods
_instanceMethods - dict of instance methods
_rootClass       - is the _PyDOBase root class metaclass instance
_instantiable    - is this instantiable
connectionAlias  - connection alias string
table            - string naming the table
mutable          - are instances of this mutable?
fieldDict        - the dict of columnname: dbtype
unique           - list of candidate keys
sequenced        - dict of attrname: seq_name
auto_increment   - dict of attrname: auto_increment_name

Attributes on DataClass instances
--------------------
_dataClass       - the class which I'm an instance of
_dict            - dict of current row

Static Methods
--------------------
getDBI()                      - gets database interface (see conn.readme)
getColumns(qualified = None)  - get column names (with table name if qualified)
getTable()                    - get table name
_baseSelect(qualified = None) - get SELECT fragment to get rows of object
_matchUnique(kw)              - returns an eligible candidate key based on 
                                contents of _dict
_uniqueWhere(conn, kw)        - generate a where clause from output of 
                                _matchUnique
getUnique(**kw)               - get a unique obj based on keyword args
getSome(**kw)                 - get some objs based on keyword args
new(refetch = None, **kw)     - get new object based on kw args, if refetch
                                is true, refetch obj after insert
_validateFields(dict)         - does simple validation of fields on insert
commit()                      - causes the database connection of this
                                object to commit.
rollback()                    - causes the database connection of this
                                object to roll back.
                  
Instance Methods
--------------------

__init__()                    - can be used to prepopulate data object 
                                instance attributes.  Can have no arguments 
                                other than self.
dict()                        - returns copy of dict representing current row
updateValues(dict)            - make the values in current dict "stick"
delete()                      - delete current row
refresh()                     - reload current object
joinTable(thisAttrNames, pivotTable, thisSideColumns,
          thatSideColumns, thatObject, thatAttrNames) 
                              - do cool m2m join
joinTableSQL(thisAttrNames, pivotTable, thisSideColumns,
          thatSideColumns, thatObject, thatAttrNames) 
                              - returns sql and value list for conn.execute
                                to do a m2m join but doesn't execute it so
                                you can do ordering or other shit

Dict-Style Instance Methods
--------------------
__getitem__(item)
__setitem__(item, val)
items()
copy()
has_key(key)
key()
values()
get(item, default = None)
update(dict)
