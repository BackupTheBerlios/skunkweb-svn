<!-- 
a dtd for a notation used to define state machines
Time-stamp: <02/09/04 12:36:40 smulloni> 
$Id: flowdef.dtd,v 1.4 2002/09/04 19:05:25 smulloni Exp $ 

Copyright (C) 2002 Jacob Smullyan <smulloni@smullyan.org>
  
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
  
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
  
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.
-->

<!--
This DTD exists primarily for documentation purposes, not
for programmatic use.
-->

<!-- 
root element.  Stages, flows, and fields can be defined at
toplevel. 
-->

<!ELEMENT flowdef (stage | flow | field)+>

<!--
a stage is essentially a namespace, optionally containing some 
number of fields, and optionally inheriting fields from one or
more other stages. Stages can be defined where they occur in a
flow, or at top level.  When a stage is not defined inline, or
occurs more than once within one or more flows, it can be
referenced by id: <stage idref="4"/>.  In that case, it is not
permitted to define fields for the stage.

what an application means by "stage" and "field" is specific to
the application. 
-->

<!ELEMENT stage field*>
<!ATTLIST stage 
    id ID #IMPLIED
    idref IDREF #IMPLIED
    inherits IDREFS #IMPLIED>

<!ENTITY % node "(stage | flow | cond)">

<!-- 
flows contain a sequence of stages, flows, or conds. The
progression from one stage to another is application-defined.
-->

<!ELEMENT flow %node;*>
<!ATTLIST flow 
    id ID #IMPLIED
    idref IDREF #IMPLIED>

<!-- 
a field is a data segment, and can contain anything.  Like stage,
it should not contain a definition when it has the idref 
attribute.  Its name should be unique among fields.  
-->

<!ELEMENT field ANY>
<!ATTLIST field
    id ID #IMPLIED
    idref IDREF #IMPLIED
    fieldname CDATA #REQUIRED>

<!-- 
a cond is a way of writing if <expr> then node1; else 
node2. node2 is optional. 
-->

<!ELEMENT cond expr %node; %node;? >
<!ATTLIST cond
    id ID #IMPLIED
    idref IDREF #IMPLIED>

<!-- 
an expr is also a data segment, containing code that can 
return a boolean value to an application. The type attribute 
gives the application a cue as how to evaluate the expression.
-->

<!ELEMENT expr ANY>
<!ATTLIST expr 
    type CDATA #IMPLIED
    id ID #IMPLIED
    idref IDREF #IMPLIED>
