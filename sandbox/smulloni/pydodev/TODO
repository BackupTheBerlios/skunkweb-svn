
To catch up with the old PyDO:
  * scatterFetch (but am defering, see below)
  * more drivers
  * docs

New features:
  * support for AS in field names (?).  Maybe more trouble
    than it is worth.
  * dbtype is currently unused (and isn't necessary for what
    PyDO does, so is now optional).  But it would be useful for:
    - on update, coercing the value given to the same type
      the underlying driver would return.  So if you update
      an int column with '3', the dict would contain the integer
      3 for that column (right now, it would contain whatever
      the user put in and not reflect the database/driver's type
      coercions, for both old and new PyDO).
    - generating CREATE TABLE statements (not a huge priority of
      mine, but someone might use it).
  * updateSome, deleteSome().
  * projection() -- dynamically create a derived PyDO class with a 
    subset of the table's fields.
  * make it possible to derive the field list, unique, sequence, 
    auto_increment etc. of a class by  introspection (like SQLObject,
    Ruby's ActiveRecord).
  * joins could use additional parameters so you could add to the
    where clause. (?)

Looking at scatterFetch, which I've never used, I'm thinking that
perhaps I should first implement projections, and then think about a
general means for getting multiple objects/projections at once in one
result set. 
