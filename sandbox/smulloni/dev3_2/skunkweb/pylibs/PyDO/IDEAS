PyDO 

X = Done
? = Maybe
/ = Maybe later
* = Not Done
N = No

/ make __getattr__/__setattr__ hooks work in subclasses 

? make so can do 3 way M2M (add args to generated m2m methods), e.g.
    Users \		      Users    	   \
    Roles +-- UserTeamRoles   Events 	   +-- AssignedEvents
    Teams /		      TeamPresence /
  with ogenscript

* add docstrings to code generated by ogenscript

X.5  Have the oracle connection support BLOBs and CLOBs 
    Infrastructure is now in place

X inherit unique - is augment or replace? -- replace on override
X fix inheritance rules (inherit unique and sequenced and table properly)
X make scatterFetchSQL handle composite FK's
X add docstrings to methods that currently don't have them in PyDO
X detect one-to-one relations in ogenscript, so properly makes getUniques on
  both sides
X detect many-to-many relations in ogenscript
X add where clause generation for scatter fetches --oops!
X Scatter fetch method (scatterFetchUnique, scatterFetchSome, and 
  scatterFetchSomeSql methods) returning a list of (or in unique case,
  a single) tuples of objects corresponding to some join parameters. 
X add stored proc functionality from SQL module to oracleconn
X make PyDOBase only do method/field/connectionAlias
  inheritance and have the rest done by PyDO 
X figure out if pickling can fit in in any way, since currently, these things
  aren't picklable because of the methods.
X make inheritance semantics overrideable in subclasses
X eventually have a generic meta class base that just does the static/instance 
  method stuff and inheritance thereof (instance attrs too?) static.py
X split SQL generation and general PyDO functionality (dict methods) into
  separate classes. (PyDOBase has non-sql stuff)
X update docs re: fields and jointable stuff and __init__
X now can have a single argument constructor (self) to set up default values
X perhaps have joinTable handle composite FKs
X rename attributes to fields and make it a list of tuples.  Have fieldDict 
  member which is a dict form of it.
X fix docs to new semantics since revamp
X revamp proxy so no REAL methods, but something else so proxy works same way
  as PyDO?
X revamp so "static" (now REAL_) functions are in a subclass of the real
  PyDO base class so there is no weird duality...  simplifies __getattr__ 
  hook.
X table not required (useful for base classes)
X connectionAlias is now inherited
X a dict() method which returns self.valueDict
X deleted flag which makes the instance immutable
X major revamp, reintroduced proxies
X update the oracle driver to new interface stuff.
X rename class_methods to static_methods and update usage everywher (docs)
X have the unbound method returned be an object that checks to see
  that the self argument is proper.
X typechecking on query args for getSome and getUnique
X identify which PyDO base methods are instance methods and make sure that
  __getattr__ returns unbound methods for them so they can be properly 
  overridden in subclasses.
X document usage of PyDO classes 
X document how to define PyDO classes 
X make so can subclasses can override PyDO methods
X inherting of class methods
X make methods inherited also
X Make inheritance work
X Add a join function
X Type checking on setitem
X data type conversions -- specifically Date kinds
X read-only definition ability (mutable = 0)
X PYDO with no SQL stuff ? - so can use stored procs instead?
   PyDOSQL which does the current stuff
   No, stuff can be sufficiently overridden to do this

N change to PADO - Passive Agressive Data Objects, PyDO is fine
N immutable attributes, too granular, can make a class that just contains
  the relavent stuff and make it immutable.
N constructor like function to do weird stuff for inheritance (i.e. only 
  inherit some attributes, or other stuff like that)

