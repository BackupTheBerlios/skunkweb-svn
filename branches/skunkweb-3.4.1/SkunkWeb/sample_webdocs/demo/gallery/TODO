1. handle multiple directories.
2. annotations.
3. layout customization.
4. admin, content management.
5. user-customization controls.
6. stylesheets, more graceful appearance, embeddability.
7. switch listing.pydcmp to use the vfs, or ensure that the other
   code doesn't use 3.2 features.

A spec file for a directory should be useful for 2 & 3 -- it could
list files in the desired order, specify default values for
items_per_page, x, y, suppress files from the listing, contain
annotations, etc.  An admin app could edit this file via the web.

Multiple directories are a slightly more involved problem.  Actually
there are two issues: making the gallery program a reusable product
that can be installed in various places, and making one instance of it
service multiple directories (and give the user the ability to
navigate between them).

Mon Jan 21 17:58:16 2002

The page_num argument to index.inc is perhaps less good than
specifying an item number.

The gallery's appearance hasn't changed, but the application can now
be included in other directories without copying over files.

Wed Jan 23 14:51:17 2002

Brainstorming with Ike; a bunch of ideas.

gallery should be embeddable in a table.
ability to sort and hide images.
templates.

Tue Jan 29 00:28:58 2002

First of all, deal with the question of where to store application
data, preferably by not dealing with it and writing an abstraction. 

I had an idea anyway.  Object properties could be stored in data
components with a particular name (or whose name matches a particular
pattern -- you could have multiple streams of object properties at
once if you wanted, which, with a versioning filesystem, would present
one with interesting possibilities).  A url property service could
implement PathPropertyStore, with acquisition; it would look up
properties in the current component, then look in the component
upstream if it wasn't stated there, etc.  (Implementing this with a
scopeable would be possible.)  If a programmer didn't want the
acquired value, obtaining any value specified in that directory alone
should be possible (this can be done in scopeable, too, but I don't
have the api there that I should to make it obvious).

There is no reason that the properties components need to be in the
same filesystem -- there simply has to be a definite and configurable
way of obtaining the properties data component corresponding to a
particular object label.  Of course, using AE as an object database
may be a pretty dumb idea.

Thu Feb  7 01:05:23 2002

I ended up implementing something like the previous idea -- a
vfs.PathPropertyStore which uses python data components to store its
data.  Now to start using it.






