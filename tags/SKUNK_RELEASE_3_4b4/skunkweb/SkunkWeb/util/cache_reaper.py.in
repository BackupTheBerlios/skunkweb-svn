#!@bindir@/swpython
#  
#  Copyright (C) 2001 Andrew T. Csillag <drew_csillag@geocities.com>
#  
#      You may distribute under the terms of either the GNU General
#      Public License or the SkunkWeb License, as specified in the
#      README file.
#   
import sys
import os
import cPickle
import time
import stat

import Config
from SkunkExcept import *
import SkunkWeb.Configuration as C

conf = Config.Config([
    Config.el('keyfiles',
              'look for key files',
              None,
              'k',
              'keyfiles'),
    Config.el('cachedirs',
              desc='cache directories',
              value=None,
              short_op='c',
              long_op='cachedirs',
              value_name='pathtocache'),
    Config.el('deadtime',
              'how long after cache entry dies do we delete it',
              24 * 60 * 60,
              'd',
              'deadtime',
              'seconds',
              convert_hook = int),
    Config.el('help',
              'show this screen',
              None,
              'h',
              'help'),
    Config.el('preview',
              "don't actually delete, but show what would be done",
              None,
              'p',
              'preview'),
    ], 'walk the cache directory and reap dead entries')
    
def get_expiration(filename):
    try:
        metaDict = cPickle.load(open(filename))[0]
        return metaDict['exp_time']
    except:
        return None

# The number of cache entries reaped
_reaped, _total = 0, 0
def walk_func((dodel, deadtime, keyfiles), dirname, filelist):
    global _reaped, _total

    curtime=time.time()

    # Make a copy, since we mutate filelist
    full_list = filelist[:]

    for file in filelist:
	# Check the extension
	if file[-6:] != '.cache':
	    continue

        filename = os.path.join(dirname, file)

        _total = _total + 1

        exp_time = get_expiration(filename)

        if (exp_time is not None
            and exp_time < (curtime - deadtime)
            and exp_time != -1):
            #print 'Reaping %s\n    ttd=%d  tl=%d' % (filename, timestamp,
            #                                         curtime - deadtime)
            _reaped = _reaped + 1
            if dodel:
                tozap=[file]
                if keyfiles:
                    keyfile = file[:-6] + '.key'
                    tozap.append(keyfile)
                for f in tozap:
                    # Wasteful
                    _f = os.path.join ( dirname, f )
                    try:
                        os.unlink( _f )
                    except OSError, val:
                        print >> sys.stderr, 'cannot unlink %s: %s' % \
                              ( _f, val )

                    # Get rid of the filename in the list, to prevent os.walk()
                    # from breaking
                    try:
                        del filelist[filelist.index(f)]
                    except ValueError:
                        pass


def checkScopes(m, cargo):
    for i in m:
        try:
            cacheroot=i.overlayDict['componentCacheRoot']
        except KeyError:
            pass
        else:
            cargo[cacheroot]=0
        checkScopes(i.children(), cargo)

if __name__=='__main__':        

    try:
        args = conf.parse(sys.argv[1:])
    except:
        conf.usage()
        sys.exit()

    if conf['help'] or args:
        print conf.usage()
        sys.exit()

    if conf['preview']:
        print 'running in preview mode'
        dodel = 0
    else:
        dodel = 1

    cacheDirs = conf['cachedirs']
    deadtime = conf['deadtime']
    keyfiles = conf['keyfiles']

    if cacheDirs==None:
        dirs={}
        if C.componentCacheRoot:
            dirs[C.componentCacheRoot]=0
        checkScopes(C.scopeMatchers(), dirs)
        cacheDirs=dirs.keys()
    else:
        cacheDirs=cacheDirs.split(':')

    print "About to delete cache entries expired more than %d seconds ago" \
          " in %s" % (deadtime, ", ".join(cacheDirs))
    start_time=time.time()
    for cdir in cacheDirs:
        _t=time.time()
        os.path.walk(cdir, walk_func, (dodel, deadtime, keyfiles))
        if dodel:
            print 'Deleted',
        else:
            print 'Would have deleted', 
        print '%d out of %d total cache entries, time taken %.3f seconds' % \
              (_reaped, _total, time.time() - _t)
    print "total time: %.3f seconds" % (time.time() - start_time)
    sys.exit(0)
