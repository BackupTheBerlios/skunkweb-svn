#!@bindir@/swpython
# -*- python -*-
#  
#  Copyright (C) 2003 Andrew T. Csillag <drew_csillag@yahoo.com>
#  
#      You may distribute under the terms of either the GNU General
#      Public License or the SkunkWeb License, as specified in the
#      README file.
#   
from AE import MimeTypes, Executables
from AE.Cache import getMessageCatalog
from SkunkWeb import Configuration
import os
import sys
import getopt
import stat

def help():
    print "Usage: %s [-n] [-h] [-s path] [-c path] [files]" % sys.argv[0]
    print
    print "  -n, --no-debug         do not include *any* debug info in compiled form"
    print "  -h, --help             this screen"
    print "  -s path,               generate a shadow docroot"
    print "     --shadow-docroot=path"
    print "  -c path,               use alternate cache root"
    print "     --cache-root=path"
    print "  -d path,               use alternate document root"
    print "     --document-root=path"
    print
    print "The [files] argument is a space-delimited list of filenames "
    print "relative to the docroot, e.g. /usr/l/skunk/docroot/vv/index.html"
    print "would be passed as vv/index.html"
    sys.exit(1)
    
try:
    optlist, args = getopt.getopt(sys.argv[1:], 'nhs:c:d:', [
        'no-debug', 'shadow-docroot=', 'help', 'cache-root=',
        'document-root='])
except:
    help()
    
debugit = 1
ndr = None

for (opt, optval) in optlist:
    if opt in ('-n', '--no-debug'):
        debugit = 0
    elif opt in ('-s', '--shadow-docroot'):
        ndr = optval
    elif opt in ('-h', '--help'):
        help()
    elif opt in ('-c', '--cache-root'):
        Configuration.compileCacheRoot = optval
    elif opt in ('-d', '--document-root'):
        Configuration.documentRoot = optval
        
if not debugit:
    Configuration.dontCacheSource = 1
    Configuration.noTagDebug = 1

exemap = {}
for (mt,ct),v in Executables.executableByTypes.items():
    exemap[mt]=v

ldr=len(Configuration.documentRoot)

def compile_thing(i):
    mimetype=MimeTypes.getMimeType(i)

    exe=exemap.get(mimetype)
    if exe:
        pathname = i# '%s/%s' % (rdn, i)
        cache_file = Configuration.compileCacheRoot+"/"+pathname+"c"
        #print "deleting cache file", cache_file
        try:
            os.unlink(cache_file)
	except os.error, x:
	    pass #print "non-fatal: unable to delete cache file:", x 

        print "compiling %s" % pathname
        try:
            exe(pathname, Executables.DT_DATA, 0)
        except:
            print "compilation of %s failed" % pathname
        if ndr:
            rdn = os.path.dirname(i)
            try: os.makedirs('%s/%s' % (ndr, rdn))
            except OSError: pass
            open('%s/%s' % (ndr, i), 'w').write('')

    elif mimetype in ('application/x-complex-message-catalog',
                      'application/x-simple-message-catalog'):

        pathname = i
        cache_file = Configuration.compileCacheRoot+"/"+pathname+"c"
        #print "deleting cache file", cache_file
        try:
            os.unlink(cache_file)
	except os.error, x:
	    pass #print "non-fatal: unable to delete cache file:", x 
        try:
            getMessageCatalog(i)
            print "compiled catalog %s" % i
        except:
            print "error compiling message catalog %s" % i

        if ndr:
            rdn = os.path.dirname(i)
            try: os.makedirs('%s/%s' % (ndr, rdn))
            except OSError: pass
            open('%s/%s' % (ndr, i), 'w').write('')
            
    elif ndr: # shadow docroot but non-template file, copy.. blah blah
        rdn = os.path.dirname(i)
        #what's the mode
        print "I is", i
        srcfilename = '%s/%s' % (Configuration.documentRoot, i)
        destfilename = '%s/%s' % (ndr, i)
        mode = os.lstat(srcfilename)[stat.ST_MODE]
        dirmode = os.stat('%s/%s' % (Configuration.documentRoot, rdn))[stat.ST_MODE]
        #regular file
        if stat.S_ISREG(mode): 
            try: os.makedirs('%s/%s' % (ndr, rdn), dirmode)
            except OSError: pass
            open(destfilename, 'w').write(open(srcfilename).read())
            os.chmod(destfilename, mode)
        #symlink
        elif stat.S_ISLNK(mode):
            try: os.makedirs('%s/%s' % (ndr, rdn), dirmode)
            except OSError: pass
            linkdest = os.readlink(srcfilename)
            print 'dest is', destfilename
            print 'linkdest is', linkdest
            os.symlink(linkdest, destfilename)

def func(arg, dirname, fnames):
    rdn = dirname[ldr:]
    for i in fnames:
        compile_thing(rdn + "/" + i)

if args:
    for i in args:
        compile_thing(i)
else:
    os.path.walk(Configuration.documentRoot, func, None)
