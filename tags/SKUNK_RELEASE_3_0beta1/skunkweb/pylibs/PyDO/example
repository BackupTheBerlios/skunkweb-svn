Oracle example

Ok, for starters you've got a simple users table:

CREATE TABLE USERS (
    OID NUMBER,
    USERNAME VARCHAR(16),
    PASSWORD VARCHAR(16),
    CREATED DATE,
    LAST_MOD DATE
)
/

And a sequencer for the OID:

CREATE SEQUENCE USERS_OID_SEQ;
/

And you want to do stuff with it using PyDO.

from PyDO import *
DBIInitAlias('drew', 'pydo:oracle:drew/drew@drew')
class Users(PyDO):
    connectionAlias = 'drew'
    table = 'USERS'
    fields = (
        ('OID'     , 'NUMBER'),
        ('USERNAME', 'VARCHAR(16)'),
	('PASSWORD', 'VARCHAR(16)'),
        ('CREATED' , 'DATE'),
        ('LAST_MOD', 'DATE')
        }
    sequenced = {
        'OID': 'USERS_OID_SEQ'
        }
    unique = [ 'OID', 'USERNAME' ]

Ok, line-by-line, this is what this all means:

> from PyDO import *

Import the contents of PyDO into your module namespace.  PyDO is pretty clean
and shouldn't pollute the namespace significantly as it was designed to be 
imported this way, but if that irks you, doing a regular import PyDO will
also work (but you'll need to adequately qualify things, obviously).

> DBIInitAlias('drew', 'pydo:oracle:drew/drew@drew')

PyDO has a database driver library thingy.  It's not really meant for use 
outside of PyDO, but you can use it if you like, it's mainly there so the main
PyDO code doesn't have to care so much about the underlying database so much
in terms of things like: whether it support bind variables or not and etc.

The arguments to DBIInitAlias are: a connection alias name (used as
connectionAlias in your data classes), and a pydo connect string.  For
oracle, the connect strings are of the form
pydo:oracle:user/password@inst.

> class Users(PyDO):

All dataclasses inherit directly or indirectly from the PyDO base
class.

> connectionAlias = 'drew'

Used to select the database connection to use for this object.  You
can have more than one connection going at a time, so you need to
choose one (presumably the one that has the table you're going to
use).  In this case we're going to use the alias that we initialized
previously. 

> table = 'USERS'

PyDO needs to know what table the rows will be coming from if it's
going to do anything, so we point it at the previously created USERS
table.

> fields = (
>     ('OID'     , 'NUMBER'),
>     ('USERNAME', 'VARCHAR(16)'),
>     ('PASSWORD', 'VARCHAR(16)'),
>     ('CREATED' , 'DATE'),
>     ('LAST_MOD', 'DATE')
>     }

What you need to do here is associate the
column names from the table to their database type.  The case of the
column names *must* be the same as the native case of the database for
such things (specifically, the same case as what the database driver
returns on a describe of a query).  For most databases, this is
uppercase, same for the database type. 

> sequenced = {
>     'OID': 'USERS_OID_SEQ'
> }

This says, if on a call to new() (described later), OID is not
specified, then fetch it from the sequence here named.  

> unique = [ 'OID', 'USERNAME' ]

This is a list of candidate keys - columns that uniquely identify a
row.  



Using this new dataclass
------------------------------
Assuming the aforecreated USERS table is empty, we need to put some
something in it before we start.

newUser = Users.new(USERNAME = 'drew', PASSWORD = 'foo', CREATED = SYSDATE,
                    LAST_MOD = SYSDATE)

The new method inserts a new row into the table.  There is an optional
parameter, refetch which effectively calls the refresh method
(described below).  This is useful in the case where you have a table
with default values for columns and you want to make references to the
values with the defaults in place.

What this will do is: fetch a new OID from USERS_OID_SEQ since OID
wasn't specified above, and subsequently insert a new row into the
USERS table with the OID and the values specified in the call to
new().

As you will notice, SYSDATE is a variable that translates to the
databases' idea of the current date (and time).


Now that we have a Users instance, we can examine it a bit more
closely.  PyDO subclass instances observe the python dictionary
interface.

For example:

>>> newUser['USERNAME']
'drew'
>>> newUser['OID']
1
>>> newUser.keys()
('OID', 'USERNAME', 'PASSWORD', 'CREATED', 'LAST_MOD')


Mutating Data Class Instances
------------------------------
If you don't want your data class instances to be mutable (for
whatever reason), assign 1 to the mutable variable in your class
definition.

To mutate object, you use the dictionary-style mutation interface.
For example, to change the value of USERNAME in the current row:
>>> newUser['USERNAME'] = 'fred'

What this will do is cause the following UPDATE query to be sent to the
connection.
UPDATE USERS SET USERNAME = :p1 WHERE OID = :p2
(bind variables p1 = 'fred' and p2 = 1)

One might ask: "how the hell did that happen?"  The answer is this:
it got the table from the table specified in the data class
description

> table = 'USERS'

The attribute name is the item you assigned to.  The 'OID = :p2' part
is a bit more interesting.  If you look above, you'll see:

> unique = ['OID', 'USERNAME']

What PyDO does is this:  it loops over the unique list and for each
item in the list is determines if it is a tuple or string.  If it's a
string, it's the name of an field that uniquely identifies a row
in the table (here 'OID').  If the current object has that key-value
pair, it stops having found an identifying field and so composes the
where clause.  If it is a tuple, it is a set of fields that uniquely
identify the row.  If all such fields are populated in the current
object, it will stop and compose the where clause from the ANDing
check of those fields in the current object.  In the case where either
there is no unique line specified or the key-value pairs aren't
defined in the current object, an exception saying "No way to get
unique row!" will be raised.

Ideally, if you want to update more than one field in your object in
one UPDATE query, you can use the update method (from the dictionary
interface) to accomplish this.

> newUser.update({'USERNAME': 'barney', PASSWORD='iF0rG0t'})

This will update both column values in one UPDATE query.


You might now say, well, that's all fine an dandy, but to do this
correctly, I want to make sure that the LAST_MOD field gets
updated appropriately when people change the object!  Well, be at
rest, we can do that too.  Behind the scenes, the __getitem__ and
update methods call an instance method updateValues that actually does
the hard work and we can override this to update LAST_MOD as
appropriate. 

Defining Instance Methods
------------------------------

If we add the following method to the Users class definition, this
will do the trick:

    def updateValues(self, dict):
        if not dict.has_key['LAST_MOD']:
	    dict = dict.copy()
	    dict['LAST_MOD'] = SYSDATE
	return PyDO.updateValues(self, dict)

All it does is say, if they didn't specify a value for LAST_MOD (we
assume here that if they specified it, they did for good reason), we
make a copy of the dict (in the case that they still hold a reference
to it, we don't want to screw it up) and set LAST_MOD to SYSDATE, and
subsequently call our baseclasses version of updateValues.

This brings us to methods, of which there are two flavors, static and
instance.  Python itself doesn't have the notion of static methods,
but for certain applications (specifically PyDO), they can be
made available and incredibly useful.

To create a regular method, just write it as if everything was normal
in python land.  Nothing big to mention here.  It will apply to
instances of data classes and you can get an unbound verion by saying
<class>.<method> just as in regular Python.

Defining Static Methods
------------------------------
For static methods, you define your method as such:
    def static_<mymethodname>(self, ...whatever...):

The static_ prefix says "this is a static method".  The self argument
will point to the data class itself, not an instance of the dataclass.
In the case that you want to call a super classes static method on the
current subclass, and in the context of the subclass, you say: 
   fooresult = MySuperClass.static_barmethod(self, baz, fred, barney)

This is useful when you are overloading a static method in a subclass
but still want to call the superclass version (such as new).  This is
very much unlike Java, which disallows this.  (don't know about C++)

Your newly-defined method can then be called as
SomeClass.<mymethodname>(...whatever..) without the static_ prefix to
call the method statically.  For example, the call to the new method
on the Users object towards the beginning of this document is a static
call (it's defined as static_new in the PyDO base class). 

NOTE: you cannot override a static method with an instance method or
vice versa.

Why this is useful is this:  You want to make it so that you don't
have to specify the CREATED and LAST_MOD fields when making a call
to new since the caller shouldn't really have to care and it can be
taken care of automatically.  You can, if you want to, enforce what
fields they can or must set on a call to new.  For example:
setting the CREATED and LAST_MOD automatically and enforcing that
USERNAME and PASSWORD only are specified.

    def static_new(self, refetch = None, USERNAME, PASSWORD):
        return PyDO.static_new(self, refetch, USERNAME=USERNAME, 
       			       PASSWORD=PASSWORD, CREATED=SYSDATE, 
       			       LAST_MOD=SYSDATE)
       
MAKE SURE TO USE THE STATIC UNBOUND VERSION WHEN CALLING YOUR
SUPERCLASS OR THE WRONG THINGS WILL LIKELY HAPPEN!

In the cases where PyDO is not your direct superclass, you might call
your superclass' static_new method instead.  On the other hand, you
may want to handle the new method entirely yourself.


Relations and PyDO
------------------------------

The way you do relations with PyDO is with methods.  For example, if
we had a Files class which had an field OWNER_ID which was a
foreign key to the USERS table, we could write a method for the Users
object like this (a one to many relation):
    def getFiles(self):
	return Files.getSome(OWNER_ID = self['OID'])

*FIXME, this paragraph sounds weird*
The getSome static method, given fields in the object will generate a where
clause with those fields and return a list of objects, each of
which representing one row.

If Users had an One to One relationship with Residence, we could
write a method to get it (presuming Residence, again has a foreign key
to the USERS table in a column/field named OWNER_ID):
    def getResidence(self):
        return Residences.getUnique(OWNER_ID = self['OID'])

The getUnique static method is similar to getSome except that it will
return only one row or None.  It uses the unique attribute (here on
the Residences object) to determine how to get a unique row.  If you don't
specify any identifying rows, it will raise an exception saying "No
way to get a unique row", or in the case that it mysteriously finds
more than one row, will raise a similar exception.

To do Many To Many relations, things are a bit more interesting.
Since there may or may not be an object that represents the pivot
table (or linkage table) that links the two tables together, and you
probably wouldn't want to do the work to traverse all of them anyhow,
there is a joinTable method which simplifies the work.

Say there is a Groups entity and a table USERS_TO_GROUPS which is the
pivot table and has two columns, USER_ID and GROUP_ID (foriegn keyed
as appropriate).  You'd write a method getGroups as such:
    def getGroups(self):
        return self.joinTable('OID', 'USERS_TO_GROUPS', 'USER_ID',
                              'GROUP_ID', Groups, 'OID')

What this will do is do the join across the USERS_TO_GROUPS table to
the table that the Groups object corresponds to.  The parameters
(matched up to the arguments supplied above) are:
    thisAttributeNames   - 'OID'   
        attribute(s) in current object to join from
    pivotTable         - 'USERS_TO_GROUPS'  
        pivot table name
    thisSideColumns    - 'USER_ID' 
        column(s) that correspond to the foriegn key column to myAttributeName
    thatSideColumns    - 'GROUP_ID' 
        column(s) that correspond to the foriegn key column to thatAttributeName
    thatObject        - Groups 
        the destination object
    thatAttributeNames - 'OID'  
        see thatSideColumns

If in the case you want to do things like ordering and such on a many to many
relation, you can use the joinTableSQL function (takes the same arguments) to
get the sql and value list to use.  From there you can add to the generated
sql statement things like "ORDER BY FOOTABLE.BAZCOLUMN" and such.  From there
you use the dbi's execute function to execute the query and subsequently
construct the objects.

Refreshing an Object
------------------------------
Ok, we've learned that the information in the current row has been
altered (by nefarious means - mwahahahah!  or not) in the database, but we
still hold the old information.  By calling the refresh() method, it
effectively does a getUnique on itself and refreshes it's contents.
If the object no longer exists, it raises an appropriate error.


Deleting An object
------------------------------

We're now done with this user object and want to dispose of it from
the database.  Using the delete method it issues an appropriate DELETE
query to the database.  Since it needs a unique row, the usual things
related to uniqueness mentioned above apply.


Summary
------------------------------
This should cover most of the things one needs to do to use PyDO.  To
learn more see the file named doc in this directory.