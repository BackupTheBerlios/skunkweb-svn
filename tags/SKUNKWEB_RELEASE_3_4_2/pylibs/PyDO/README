What is PyDO?

PyDO is a Object-Relational database access tool. Unlike many other
O-R database access tools, PyDO:

    * easy to wrap your head around
    * doesn't constrain your schema to what it thinks databases should
      look like
    * if you need/want to override the way it does it's work, it's not
      a major surgical effort
    * has tools that will, given a database connection (for Oracle and
      PostgreSQL anyway) can do a lot of the work for you in writing
      your data classes.
    * like any good tool, makes the easy stuff a no-brainer and makes
      the harder things easier too.
    * works with more than one database (currently Oracle, PostgreSQL
      and MySQL, but others are definitely possible)
    * is easy to figure out how it works and when it does things so
      that you won't piss off your DB admin

If you are going to use oracle, you need the DCOracle, or preferably
the DCOracle2 pacakge available from the zope.org site at:
    http://www.zope.org/Products/DCOracle
  and 
    http://www.zope.org/Members/matt/dco2
respectively

First, you will need the mx.DateTime module available from the mxBASE package
http://www.lemburg.com/files/python/eGenix-mx-Extensions.html#mxBASE.

If you are going to use PostgreSQL, build and install the Python
interface located in it the PostgreSQL build tree under the
src/interfaces/python directory.  You'll also need the mxBase Python
package (you probably have it anyway since the pgdb.py shipped with 
PostgreSQL needs it)
Get it at:
    http://www.lemburg.com/files/python/eGenix-mx-Extensions.html

If you are going to use MySQL, get, build and install the Python MySQL
module.  The MySQL stuff hasn't been extensively tested, and as such
may be quite broken, so you may have problems!  Let me know though and
we'll remedy that.

Files of Note:
    PyDBI.py      - the database code loader thing
    PyDO.py       - the main module
    postconn.py   - the PostgreSQL driver
    oracleconn.py - the Oracle driver
    mysqlconn.py  - the MySQL driver
    overview      - An overview of PyDO and why it's cool
    example       - a walk through example on how to write PyDO objects
    example.py    - a very simple sample PyDO-using module
    doc           - a bit more granular detail on PyDO stuff
    scatfetch     - a brief description of the scatter fetching stuff
    conn.readme   - what the connection interface object looks like
    ogenscript.py - a cool PyDO class generator that grovels over the
                    Oracle system catalogs!  Run it with an account
                    that can see ALL_OBJECTS, ALL_TAB_COLUMNS,
                    ALL_CONSTRAINTS and SYS.ALL_CONS_COLUMNS and
                    answer a few questions and BAM!  most of the work
                    generating PyDO classes is done!
    pgenscript.py - similar to ogenscript, but works with PostgreSQL!
